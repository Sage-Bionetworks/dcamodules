// function to change color based on bg color
@function set-font-color($color) {
  @if (lightness($color) > 50) {
    @return $black; // Lighter background, return dark color
  } @else {
    @return $white; // Darker background, return light color
  }
}

// mixin to set theme
@mixin dca-set-theme($theme) {
  // get theme object
  $current-theme: map-get($themes, $theme);
  $primary: map-get($current-theme, primary);
  $accent: map-get($current-theme, 'accent');
  $dark: map-get($current-theme, 'dark');
  $light: map-get($current-theme, 'light');

  $cl: (
    'primary': $primary,
    'accent': $accent,
    'success': $success,
    // not change with theme
    // $info: ;
    // not change with theme
    'warning': $warning,
    // not change with theme
    'danger': $danger,
  );

  $font: map-get($current-theme, 'font');
  $base-font-cl: map-get($current-theme, 'base-font-cl');
  $link-font-cl: map-get($current-theme, 'link-font-cl');
  $header-bg-cl: map-get($current-theme, 'header-bg-cl');
  $header-font-cl: map-get($current-theme, 'header-font-cl');
  // sidebar
  $sidebar-bg-cl: map-get($current-theme, 'sidebar-bg-cl');
  $sidebar-font-cl: map-get($current-theme, 'sidebar-font-cl');
  $sidebar-bg-select-cl: map-get($current-theme, 'sidebar-bg-select-cl');
  $sidebar-font-select-cl: map-get($current-theme, 'sidebar-font-select-cl');
  $sidebar-bg-hover-cl: map-get($current-theme, 'sidebar-bg-hover-cl');
  $sidebar-font-hover-cl: map-get($current-theme, 'sidebar-font-hover-cl');
  // footer
  $footer-bg-cl: map-get($current-theme, 'footer-bg-cl');
  $footer-font-cl: map-get($current-theme, 'footer-font-cl');
  // box
  // waiter
  $waiter-bg-cl: map-get($current-theme, 'waiter-bg-cl');

  ///////
  // base
  body {
    background-color: $header-bg-cl;

    h1,
    h2,
    h3,
    h4,
    h5,
    span {
      font-family: $font;
      color: $base-font-cl;
    }
  }

  // header
  .skin-blue .main-header .navbar {
    background: $header-bg-cl;
    box-shadow: $primary-shadow;
    clip-path: inset(-5px -5px -5px 0);
  }

  // logo bar
  .skin-blue .main-header .logo {
    background: $header-bg-cl !important;
    box-shadow: $primary-shadow;
    clip-path: inset(-5px 0 -5px -5px);
  }

  /* sidebar: collapse button hover */
  .skin-blue .main-header .navbar .sidebar-toggle {
    background: $header-bg-cl;
    color: $header-font-cl;
    &:hover {
      background: inherit;
      color: inherit;
      opacity: 0.75;
    }
  }

  .skin-blue .main-header .logo {
    background: $primary;

    &:hover {
      background: $primary;
    }
  }

  .navbar .sidebar-toggle {
    background: $primary;
    color: set-font-color($primary);

    &:hover {
      background: $primary;
      color: set-font-color($primary);
    }
  }

  // sidebar
  .skin-blue .main-sidebar {
    background: $sidebar-bg-cl !important;
    color: $sidebar-font-cl;
    box-shadow: $primary-shadow;

    .sidebar {
      padding-top: 15px; // avoid header shadow

      li {
        & > a {
          border-left: unset !important;
          border-radius: $radius;
          margin: 0 14px;
          transition: background-color 100ms ease;
          color: $sidebar-font-cl;
          & > span {
            color: $sidebar-font-cl !important;
          }
        }

        &:hover > a,
        & > a:hover {
          color: $sidebar-font-hover-cl !important;
          background: $sidebar-bg-hover-cl;
          & > span {
            color: $sidebar-font-hover-cl !important;
          }
        }
      }

      // selected
      li.active {
        & > a {
          color: $sidebar-font-select-cl !important;
          background: $sidebar-bg-select-cl !important;
          & > span {
            color: $sidebar-font-select-cl !important;
          }
        }

        &:hover > a,
        & > a:hover {
          background: $sidebar-bg-select-cl !important;
          color: $sidebar-font-select-cl !important;
        }
      }
    }
  }

  // content
  .skin-blue .wrapper {
    background-color: $white;
  }

  .content-wrapper,
  .right-side {
    background: $white;

    a {
      color: $link-font-cl !important;
      text-decoration: underline;

      &:hover {
        text-decoration: none;
      }
    }
  }

  // footer
  .dca-footer {
    background: $footer-bg-cl;
    color: $footer-font-cl;
  }

  // boxes
  @each $type in ('primary', 'success', 'warning', 'danger') {
    $bg-cl: map-get($cl, #{$type});

    .box {
      @include dca-box-basic;

      &.box-solid.box-#{$type} {
        border: none;

        & > .box-header {
          @include dca-box-header;
          background: $bg-cl;

          & h3 {
            color: set-font-color($bg-cl);
          }
        }
      }

      &.box-#{$type} {
        border-color: $bg-cl;

        & > .box-header {
          @include dca-box-header;

          & h3 {
            color: $black;
          }
        }
      }
    }
  }

  // buttons
  .btn-default,
  .action-button {
    @include dca-btn-basic;
    background: $accent;
    color: set-font-color($accent);
    filter: grayscale(0%) opacity(1);
    transition: 100ms;

    &:hover,
    &:focus,
    &:active,
    &:active:focus,
    &:visited {
      background: $accent;
      color: set-font-color($accent);
      filter: grayscale(20%) opacity(0.7);
    }
  }

  @each $type in ('primary', 'accent', 'success', 'warning', 'danger') {
    $bg-cl: map-get($cl, #{$type});
    .btn-#{$type},
    .btn-#{$type}:active,
    .btn-#{$type}:visited {
      background: $bg-cl !important;
      color: set-font-color($bg-cl) !important;
    }
    .btn-#{$type}:hover {
      background: $bg-cl !important;
    }
  }

  // waiter
  .waiter-overlay.waiter-local {
    background: $waiter-bg-cl !important;
  }
}
